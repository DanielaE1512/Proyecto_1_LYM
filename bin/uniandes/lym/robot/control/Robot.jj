/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options 
{
	LOOKAHEAD = 1; 
	IGNORE_CASE = true;
	STATIC = false;	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	/*Mapa que tiene la estructura:
		key: nombre de la variable global.
		value: valor de dicha variable global.
	*/

	HashMap<String, Integer> WV = new HashMap<String, Integer>();

	/*Mapa que tiene la estructura:
		key: nombre de la variable local.
		value: valor de dicha variable local.
	*/
	HashMap<String, Integer> LV = new HashMap<String, Integer>();

	/* Mapa donde que tiene la estructura:
		key : nombre de un procedimiento declarado.
		value: listas que contienen los strings de las variables declaradas para el procedimiento.
	*/
	HashMap<String, ArrayList> proceduresVars = new HashMap<String, ArrayList>();
	
	/* Mapa que tiene la estructura:
		key: nombre de un procedimiento.
		value: mapas que cumplen la structura:
			key : strings de los comandos o procedimientos que se ejecutan.
			value: lista de los strigns ordenados que se usan como parametro en los comandos o procedimientos.
	*/
	HashMap<String, HashMap <String, ArrayList> > proceduresE = new HashMap<String,  HashMap <String, ArrayList>>();

	/* Mapa que tiene la estructura:
		key: nombre de un procedimiento.
		value: nombre de los comandos usados dentro del procedimiento de manera ordenada.
	*/
	HashMap<String, ArrayList< String > > proceduresLines = new HashMap<String, ArrayList< String > >();

	/*Lista que contiene todos lo comandos que se deben ejecutar, usada especialmente para loops*/

	ArrayList< String > lines = new ArrayList< String >();
	
	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|"\r"
	|"\t"
	|"\n"
}

TOKEN: /* Nombres de Comandos */
{

	<MOV:  "Mov">
	|<RIGHT: "RIGHT">
	|<PUT: "Put">
	|<PICK: "Pick">
	|< POP: "Pop" >
	|<GO: "GO" >
    |< HOP:  "HOP" >
    |<JUMP: "jump">
    |<TURN: "turn">
	|< TURNTO: "turnto">
	|<  DROP: "drop" >
	|<  GET:"get" >
	|< GRAB: "grab" >
	|< LETGO: "letgo" >
	|< NOP: "nop" >
	|< WALK: "walk" >
	|< LEAP: "leap" >
	|< O: "north"|"south"|"west"|"east" >
	|< D: "front"|"right"|"left"|"back" >
	|< dirct: "left"|"right"|"around" >		

}

TOKEN:
{
	<BALLOONS:  "BALLOONS" >
	|<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
	<NUM: (<DIGIT>)+ >
	|  	<#DIGIT: ["0"-"9"] >
        
}


/* Palabras reservadas */
TOKEN:
{
	< defproc: "defproc" >
	|< defvar: "defvar" >
	|< dir: ("north"|"south"|"east"|"west") >
}


/* Condicionales */
TOKEN:
{
	< facing: "facing" >
	|< can: "can" >
	|< not: "not" > 
}

/* estructuras de control */
TOKEN:
{
	< IF: "if">
	|< ELSE: "esle">
	|< WHILE: "while">
	|< REPEAT: "repeat">
	|< TIMES: "times">
}

TOKEN:
{
  	< NAME: < LETRA >(< LETRA >|< NUM >)*  >
	| < #LETRA : ["a"-"z"]> 
}


//boolean command(uniandes.lym.robot.view.Console sistema) :


boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}
	
	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| <MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| <HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| <GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		| <PUT> "("  put() ")"					  			
		| <PICK> "(" get()  ")"	
	    | < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 
	
		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+
		|script() { return true;} 
	
		| <EOF> {return false;} 
	}

void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 
	
	}

void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 
	
	}

/*basics */

void script():
	{
	}
	{
	  (vproc()
	  |vblock()
	  |vvariable()
	  )
	}

/* creando un pro */

void vproc():
	{
	  String id = null;
	  ArrayList< String > params = new ArrayList< String >();
	  ArrayList< String > commands = new ArrayList< String >();
	  LV.clear();
	}
	{
	  < defproc >id = name()"("params = getparams()")"commands = vblockc(params) {
	    	proceduresVars.put(id,params);
	    	proceduresLines.put(id,commands);
	    }
	}

ArrayList vblockc(ArrayList< String > params):
	{
	  ArrayList< String > comandos = new ArrayList< String >();
	}
	{
	  "{"vblocklinec(comandos,params)(";"vblocklinec(comandos,params))*"}"
	  { return comandos;}
	}

void vblocklinec(ArrayList< String > comandos, ArrayList< String > params):
	{
	}
	{
	  	(controlstructurec(comandos, params)
	 	|vasignac(comandos, params)
	 	|gcommandsc(comandos, params)
	 	)
	}

void conditionalc(ArrayList< String > comandos,ArrayList< String > params):
	{
	  boolean b;
	}
	{
		< not >{ comandos.add("not");}(
	    < facing > { comandos.add("facing");}"("< dir >")" { }
		|< can >{ comandos.add("can");}"("gcommandsc(comandos,params)")" 
		)
	}

void gcommandsc(ArrayList< String > comandos,ArrayList< String > params):
	{
	}
	{
	  (ecommandsc(comandos, params)|procedure()) 
	}

void ecommandsc(ArrayList< String > comandos,ArrayList< String > params) throws Error:
	{
	  String x = null;
	  String y = null;
	  
	}
	{
	  <JUMP> "("(x = name()| < NUM > )"," y = name() ")" { if(x!= null && !((params.contains(x)|| WV.containsKey(x)) && (params.contains(y)|| WV.containsKey(y)))) { throw new Error("Variables not define");}}
		| < WALK > "(" x=name() ("," (< O >| < D >))?")"{
		 if(x!= null && !((params.contains(x)|| WV.containsKey(x))))
		 {	throw new Error("Variables not define");} }
		 
		   
		|< LEAP > "(" (x=name()| < NUM >) ("," (< O > | < D >))?")"{
		 if(x!= null && !((params.contains(x)|| WV.containsKey(x))))
		 {	throw new Error("Variables not define");} }
		 
		|<TURN> "("  < D > {comandos.add(token.image); } ")"
		|< TURNTO> "(" < dir > {comandos.add(token.image); } ")" 
		|<  DROP > "(" (x = name()| < NUM >) ")" { if(x!= null && !((params.contains(x)|| WV.containsKey(x)))) { throw new Error("Variables not define");}}
		|<  GET > "(" (x = name()| < NUM >) ")" { if(x!= null && !((params.contains(x)|| WV.containsKey(x)))) { throw new Error("Variables not define");}}
	    |< GRAB > "(" (x = name()| < NUM >) ")" { if(x!= null && !((params.contains(x)|| WV.containsKey(x)))) { throw new Error("Variables not define");}}
	    |< LETGO > "(" (x = name()| < NUM >) ")" { if(x!= null && !((params.contains(x)|| WV.containsKey(x)))) { throw new Error("Variables not define");}}
	    |< NOP > "(" ")"
	  
	}

// Para defirnir un procedimiento
void controlstructurec(ArrayList< String > comandos,ArrayList< String > params):
	{
	  Integer x = null;
	  String j = null;
	  boolean b;
	  ArrayList< String > comandos2 = new ArrayList< String >();
	}
	{
	 	(< IF > conditionalc(comandos, params) comandos2 = vblockc(params){ comandos.add("if");
	 		for (String item : comandos2)
	 		{
            	comandos.add(item);
        	}}
	 	< ELSE > comandos2 = vblockc(params) { comandos.add("else");
	 		for (String item : comandos2)
	 		{
            	comandos.add(item);
        	}}
	 	|< WHILE >conditionalc(comandos, params) comandos2 = vblockc(params) { }
	 	|< REPEAT >(j=name()|x=num()) {
	 	  	
	 	   comandos.add("repeat");
	 	   if(checkp(params,j))
	 	   	{
	 	   	  comandos.add("repeat");
	 	  	  comandos.add(j);
	 	   	 }
	 	   else if(x != null )
	 	   	{
	 	   	  comandos.add(Integer.toString(x));
	 	   	  
	 	   	 }
	 	   else {throw new Error("Variable not found") ;}
	 	   
	 	   }
	 	   < TIMES > comandos2 = vblockc(params) {
	 	    comandos.add("times");
			for (String item : comandos2)
	 		{
            	comandos.add(item);
        	}}
	 	)
	}


void vasignac(ArrayList< String > comandos, ArrayList< String > params):
	{
	  String id,id2 = null;
	  Integer x = null;
	}
	{
	  	id=name()"="( id2=name()|x=num()){
	  	  comandos.add(id);
	  	  comandos.add("=");
	  	  if (id2 != null) { comandos.add(id2);}
	  	  else { comandos.add(String.valueOf(x));}}
	}




/* Otras funciones*/
	
//Definición variable
void vvariable():
	{
	  String id;
	  int x;
	}
	{
	  < defvar >id=name()x=value() { WV.put(id,x); }
	}

//Asignación de variables
void vasigna():
	{
	  String id;
	  int x;
	}
	{
	  id=name()"="x=value() {
	    if (WV.containsKey(id)) {
			WV.put(id,x);
	      }
	      
	    else if (LV.containsKey(id)) {
			LV.put(id,x);
	      }
	    }
	}

//Ejecutar bloque de comandos simples y procedimientos
void gcommands():
	{
	}
	{
	  (ecommands()|procedure()) 
	}

// Realizar el resto de acciones
void vblock():
	{
	}
	{
	  "{"vblockline()(";"vblockline())*"}" 
	}


void vblockline():
	{
	}
	{
	 	(controlstructure()
	 	|vasigna()
	 	|gcommands()
	 	)
	}

//Ejecutar comandos
void ecommands():
	{
	  int x;
	  int y;
	  String id,j;
	
	}
	{
	  	<JUMP> "("x = value()"," y = value() ")" { world.setPostion(x,y);}
		|walk()
		|leap()
		|<TURN> "(" id=turn() ")"
			{ if ( id.equalsIgnoreCase("right")) {
			  		world.turnRight();}
				  else if ( id.equalsIgnoreCase("left")) {
			  		world.turnRight();world.turnRight();world.turnRight();}
			      else { world.turnRight(); world.turnRight(); }}
		|< TURNTO> "(" Orientation() ")"
		|<  DROP > "(" x = value() ")" { world.putChips(x); }
		|<  GET > "(" x = value() ")" { world.pickChips(x); }
	    |< GRAB > "(" x = value() ")" { world.grabBalloons(x); }
	    |< LETGO > "(" x = value() ")" { world.putBalloons(x); }
	    |< NOP > "(" ")"
		
	}
	
//Ejecutar procedimientos
void procedure():
	{
	  String id;
	  ArrayList< String > params = new ArrayList< String >();
	}
	{
	  (
	    id = name() {if (proceduresE.containsKey(id)) { params = proceduresVars.get(id); }}"("paramsinit(params)")"
	  )
	}

// Para verificar condicional que no se ejecuta
ArrayList <String > vblockconditional():
	{
	  ArrayList <String > bloque = new ArrayList <String >();
	  
	}
	{
	  "{" vblocklineconditional(bloque)(";"vblocklineconditional(bloque))*"}"
	  { return bloque; }
	}

void vblocklineconditional( ArrayList <String > bloque):
	{
	}
	{
	  	vcommandsconditional(bloque)
		| procedure()
	}


// Verificar la condición 
boolean conditional():
	{
	  boolean b;
	  boolean m;
	  boolean resultado;
	  ArrayList < String > bloque = new  ArrayList < String >();
	}
	{
	  b = not()(
	    < facing > "("m=cfacing()")" { if ( b)
	    								{ if(m ) { resultado = false;}
	    								  else { resultado=true; } }
	    							    else { if(m ) { resultado = true;}
	    								  else { resultado=false; } }
	    								  return resultado;}

	    
		|< can >"(" ecommands()")" ) { return true; }
		
	 
	}

//Verificar comando para condicional
void vcommandsconditional( ArrayList <String > bloque) :
	{
		int x = 0;
		int y = 0;
		String j= null;
	  
	}
	{
	  	<JUMP> "("x = value()"," y = value() ")" { bloque.add("jump");bloque.add(String.valueOf(x));bloque.add(String.valueOf(y));} 
		| < WALK > "(" x=value() ("," (< O >| < D >) { j=token.image;})?")"
		{ bloque.add("walk"); bloque.add(String.valueOf(x));
			if ( j != null)
			{ bloque.add(j);}
		}
		|< LEAP > "(" x=value() ("," (< O >| < D >){ j=token.image;})?")"
		{ bloque.add("leap"); bloque.add(String.valueOf(x));
			if ( j != null)
			{ bloque.add(j);}
		}
		|<TURN> "(" < D > { j=token.image;}")" { bloque.add("turn");bloque.add(j); }
		|< TURNTO> "(" < dir > { j=token.image;}")" { bloque.add("turnto");bloque.add(j); }
		|<  DROP > "(" x = value() ")" { bloque.add("drop");bloque.add(String.valueOf(x)); }
		|<  GET > "(" x=value() ")" { bloque.add("get");bloque.add(String.valueOf(x)); }
	    |< GRAB > "(" x = value() ")" { bloque.add("grab");bloque.add(String.valueOf(x)); }
	    |< LETGO > "(" x = value() ")" { bloque.add("letgo");bloque.add(String.valueOf(x)); }
	    |< NOP > "(" ")"{ bloque.add("nop"); }
	  
	}

void vcommandsconditionalcan( ArrayList <String > bloque) :
	{
		boolean r = false;
		int x = 0;
		int y = 0;
		int z,w;
		String j;
		int n = 0;
	  	Point p;
	}
	{
	  	<JUMP> "("x = value()"," y = value() ")" {p = new Point(x,y); n = world.getN(); if ( x <= n && y <= n && !wolrd.isBlocked(p) ) { r = true; } } 
		| < WALK > "(" x=value() ("," (< O >| < D >) { j=token.image;})?")" {
		  	p = world.getPosition();
		  	z = p.x;
		  	w = p.y;
		  	y = 0;
		   if(j != null)
		   	{
		   	  if ( j = "north" ) { y = 0; }
		   	  else if ( j = "south" ) { y = 1; }
		   	  else if ( j = "east" ) { y = 2; }
		   	  else if ( j = "west" ) { y = 3; }
		   	  else if ( j = "front") { y = world.getFacing();}
		   	  
		   	  else if ( j = "back") { 
		   	   if (world.getFacing() == 0) { y = 1;}
		   	   else if (world.getFacing() == 2) { y = 3; }
		   	   else if (world.getFacing() == 3) { y = 2; }}
		   	   
		   	  else if ( j = "right") {
		   	  	if 	(world.getFacing() == 0) { y = 2;}
		   	  	else if (world.getFacing() == 1) { y = 3;}
		   	  	else if (world.getFacing() == 2) { y = 1;}}
		   	  
		   	  else if ( j = "left") { 
		   	   if (world.getFacing() == 0) { y = 3;}
		   	   else if (world.getFacing() == 1) { y = 2;}
		   	   else if (world.getFacing() == 3) { y = 1;}} 
		   	}
		   	else {y = getFacing();}
		   	r = world.blockedInRange(w, z, x, y);
		   }
		|< LEAP > "(" x=value() ("," (< O >| < D >){ j=token.image;})?")" {
		   	p = world.getPosition();
		   	z = p.x;
		   	w = p.y;
		   	y = getFacing();
			if(j != null)
		   	{
		   	  if ( j = "north" ) {  w += x; }
		   	  else if ( j = "south") { w += -1*x; }
		   	  else if ( j = "east" ) { z += x;  }
		   	  else if ( j = "west" ) {z += -1*x; }

		   	  else if ( j = "front" ) {
		   	     if(y == 0) { w += x;}
		   	     else if(y == 1) { w + =- 1*x;}
		   	     else if(y == 2) { z += x;}
		   	     else { z += -1*x;}
		   	     }
		   	     
		   	  else if ( j = "back") {
		   	     if(y == 0) { z += -1*x;}
		   	     else if(y == 1) { w + = x;}
		   	     else if(y == 2) { z += -1*x;}
		   	     else if { z += x;}}
		   	   
		   	  else if ( j = "right") { 
		   	  	if(y == 0) { z += x;}
		   	    else if(y == 1) { z + =- 1*x;}
		   	    else if(y == 2) { w += x;}
		   	    else{ w += -1*x;} }
		   	  
		   	  else if ( j = "left") { 
		   	   if(y == 0) { z += -1*x;}
		   	   else if(y == 1) { z + = x;}
		   	   else if(y == 2) { w += -1*x;}
		   	   else { w += x;} }
		   	}
		   	else {
		   	  if(y == 0) { w += x;}
		   	  else if(y == 1) { w + =- 1*x;}
		   	  else if(y == 2) { z += x;}
		   	  else { z += -1*x;}
		   	}
		   	if (w <= n && z <= n ) {
		   		p = new Point(w,z);
		   		r = world.isBlocked(p); }
			
		  }
		|<TURN> "(" < D > ")" { r = true;}
		|< TURNTO> "(" < dir > ")" { r = true;} 
		|<  DROP > "(" x = value() ")" { if ( x <= world.getMyChips()) { r = true;} } 
		|<  GET > "(" x=value() ")" { if ( x <= world.chipsToPick()) { r = true;} } 
	    |< GRAB > "(" x = value() ")" { if ( x <= world.countBalloons()) { r = true;} } 
	    |< LETGO > "(" x = value() ")" { if ( x <= world.getMyBalloons()) { r = true;} }
	    |< NOP > "(" ")" { r = true;}
	    { return r}
	}

void controlstructure():
	{
	  boolean b;
	  ArrayList <String > bloque1 = new ArrayList <String >();
	  ArrayList <String > bloque2 = new ArrayList <String >();
	}
	{
	 	(
	 	< IF > b=conditional() vblock() < ELSE > vblock()
	 	|< WHILE >conditional()vblock()
	 	|< REPEAT >value()< TIMES >vblock()
	 	)
	}

void conditionalcontrol():
	{
		boolean b;
		ArrayList <String > bloque = new ArrayList <String >();
	}
	{
	  b = not()(
	    < facing > "(" < O > {lines.add("facing");lines.add(token.image);}")" 
		|< can >"("vcommandsconditional()})")"
	  )
	}


void ejecutarcommandsconditionals(ArrayList <String > bloque):
{
}
{ {
	String nombre= bloque.get(0);
	bloque.remove(0);
	if (nombre.equalsIgnoreCase("jump")){
	  int primero= Integer.parseInt(bloque.get(0));
	  bloque.remove(0);
	  int segundo= Integer.parseInt(bloque.get(0));
	  bloque.remove(0);
	  world.setPostion(primero,segundo);}

	else if(nombre.equalsIgnoreCase("walk")) {ejecutarwalk(bloque); }
  	else if(nombre.equalsIgnoreCase("leap")) {ejecutarleap(bloque); }
  	else if(nombre.equalsIgnoreCase("turn")) {String id = bloque.get(0);
  											  bloque.remove(0);
  	  										  if ( id.equalsIgnoreCase("right")) {
			  									world.turnRight();}
				  							  else if ( id.equalsIgnoreCase("left")) {
			  									world.turnRight();world.turnRight();world.turnRight();}
			      							  else { world.turnRight(); world.turnRight(); } }

	else if(nombre.equalsIgnoreCase("turnto")) {String j= bloque.get(0);
												bloque.remove(0);
	  											int dir = 2;
	  											int facing = 10;

												if ( j.equalsIgnoreCase("north")) {
		  											dir = 0;}
												else if ( j.equalsIgnoreCase("south")) {
		  											dir = 1;}
												else if ( j.equalsIgnoreCase("west")) {
		  											dir = 3;}

		
	  											while ( dir != facing) {
	  	  											world.turnRight();
	  	  										facing = world.getFacing(); } }

   else if(nombre.equalsIgnoreCase("drop")) {  int x= Integer.parseInt(bloque.get(0)); bloque.remove(0);world.putChips(x);}
   else if(nombre.equalsIgnoreCase("get")) {  int x= Integer.parseInt(bloque.get(0)); bloque.remove(0);world.pickChips(x);}
   else if(nombre.equalsIgnoreCase("grab")) {  int x= Integer.parseInt(bloque.get(0)); bloque.remove(0);world.grabBalloons(x);}
   else if(nombre.equalsIgnoreCase("letgo")) {  int x= Integer.parseInt(bloque.get(0)); bloque.remove(0);world.putBalloons(x);}
} } 

void ejecutarwalk(ArrayList <String > bloque):
{
  
}
{
  {
   ArrayList<String> directions = new ArrayList<>();
        directions.add("front");
        directions.add("right");
        directions.add("left");
		directions.add("back");

  ArrayList<String> orientations = new ArrayList<>();
       
        orientations.add("north");
        orientations.add("south");
        orientations.add("west");
        orientations.add("east");
		
        
  int primero =  Integer.parseInt(bloque.get(0));
  bloque.remove(0);
  String segundo= null;
  if (directions.contains(bloque.get(0)) || orientations.contains(bloque.get(0)))
      { segundo = bloque.get(0);
        bloque.remove(0);}

   if (segundo != null) {
     if ( directions.contains(bloque.get(0))) {
       { for ( int i = 1; i <= primero; i++)
	  			{ if ( segundo.equalsIgnoreCase("right")) {
			  		world.right();}
				  else if ( segundo.equalsIgnoreCase("left")) {
			  		world.left();}
			      else if ( segundo.equalsIgnoreCase("front")) {
			  		world.up();}
			      else { world.down(); }}}}

	 else {
	   	int dir = 2;
	  	int facing = 10;

		if ( segundo.equalsIgnoreCase("north")) {
		  dir = 0;}
		else if ( segundo.equalsIgnoreCase("south")) {
		  dir = 1;}
		else if ( segundo.equalsIgnoreCase("west")) {
		  dir = 3;}  

		
	  	while ( dir != facing) {
	  	  world.turnRight();
	  	  facing = world.getFacing(); }

	  	 world.moveForward(primero,false);} }

	 else { world.moveForward(primero,false);} 

  
   
} }

void ejecutarleap(ArrayList <String > bloque):
{
  
}
{
  {
   ArrayList<String> directions = new ArrayList<>();
        directions.add("front");
        directions.add("right");
        directions.add("left");
		directions.add("back");

  ArrayList<String> orientations = new ArrayList<>();
       
        orientations.add("north");
        orientations.add("south");
        orientations.add("west");
        orientations.add("east");
		
        
  int primero =  Integer.parseInt(bloque.get(0));
  bloque.remove(0);
  String segundo= null;
  if (directions.contains(bloque.get(0)) || orientations.contains(bloque.get(0)))
      { segundo = bloque.get(0);
        bloque.remove(0);}

   if (segundo != null) {
     if ( directions.contains(bloque.get(0)))
     		{ int x = world.getPosition().x;
	  		  int y= world.getPosition().y;
	  		  if ( segundo.equalsIgnoreCase("right")) {
			  		world.setPostion(primero+x,y);}
				  else if ( segundo.equalsIgnoreCase("left")) {
			  		world.setPostion(x-primero,y);}
			      else if ( segundo.equalsIgnoreCase("front")) {
			  		world.setPostion(x,primero+y);}
			      else { world.setPostion(x,y-primero); }}

	 else {
	   	int dir = 2;
	  	int facing = 10;

		if ( segundo.equalsIgnoreCase("north")) {
		  dir = 0;}
		else if ( segundo.equalsIgnoreCase("south")) {
		  dir = 1;}
		else if ( segundo.equalsIgnoreCase("west")) {
		  dir = 3;}  

		
	  	while ( dir != facing) {
	  	  world.turnRight();
	  	  facing = world.getFacing(); }

	  	 world.moveForward(primero,true);} }

	 else { world.moveForward(primero,true);} 

  
   
} }
  


//Funciones

void walk():
	{
	  int x;
	  String Dir = null;
	  String Ori = null;
	}
	{
	  < WALK >"(" x = value()("," (Dir = Direccion() | Ori= Orientation()))?")"
	  { if (Ori != null )
	  	{ world.moveForward(x,false);}
	  	else if ( Dir != null )
	  		{ for ( int i = 1; i <= x; i++)
	  			{ if ( Dir.equalsIgnoreCase("right")) {
			  		world.right();}
				  else if ( Dir.equalsIgnoreCase("left")) {
			  		world.left();}
			      else if ( Dir.equalsIgnoreCase("front")) {
			  		world.up();}
			      else { world.down(); }}}
		else { world.moveForward(x,false);}
	  }
	}

void leap():
	{
	  int x;
	  String Dir = null;
	  String Ori = null;
	}
	{
	  < LEAP >"(" x = value() ("," (Dir = Direccion() | Ori= Orientation()))?")"
	  { if (Ori!= null )
	  	{ world.moveForward(x,true);}
	  	else if ( Dir != null )
	  		{ int primero = world.getPosition().x;
	  		  int segundo= world.getPosition().y;
	  		  if ( Dir.equalsIgnoreCase("right")) {
			  		world.setPostion(primero+x,segundo);}
				  else if ( Dir.equalsIgnoreCase("left")) {
			  		world.setPostion(primero-x,segundo);}
			      else if ( Dir.equalsIgnoreCase("front")) {
			  		world.setPostion(primero,segundo+x);}
			      else { world.setPostion(primero,segundo-x); }}
		else { world.moveForward(x,true);}
	  }
	}


//Helpers

/**
 * Unsigned decimal number
 * @return the corresponding value of the string
 * @error  corresponding value is too large
 */

int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

/* Retorna el id de alguna funcion o variable*/
String name():
	{
	}
	{
	  < NAME >
	  {
	    return new String(token.image);
	   }
	}


/* Al crear una funcion, defproc, retorna en una lista todos los parametros que
son establecidos como entrada */
ArrayList getparams():
	{
	  ArrayList< String > params = new ArrayList< String >();
	  String id,id2 = null;
	}
	{
	  (
	    id = name(){params.add(id);}
	    ("," id2 = name())* { params.add(id2); }
	  )?
	  { return params;}
	}

/* Cuando se va a ejecutar un procedimiento definidio anteriormente inicializa las variables necesarias para que este procedimeinto
se ejecute, en caso de que no se introdusca la cantidad de parametros adecuada genera un error*/
int paramsinit(ArrayList< String > params) throws Error:
	{
	  int i,x;
	  i = 0;
	  String id;
	}
	{
	  (
	     x = value(){id = params.get(i); i++; LV.put(id,x);}
	    ("," x = value())* { id = params.get(i); i++; LV.put(id,x); }
	  )?
	  { if (params.size()-1 != i) { throw new Error("Number of parametres does not match the definition");}}
	}

/* funcion que retorna el valor de una entero o el de una variable anteriormente definida. Si la variabel no fue denifina anteriorment
genera un error*/
int value() throws Error:
	{
	  String i;
	  int x;
	}
	{
	  (	< NAME >
		  	{  i = token.image;
		  	
			  	if (!(WV.containsKey(i) || LV.containsKey(i))) {
						throw new Error("Variable not found");
			  	  }
			  	   
			  	else if (WV.containsKey(i)) {  
					x = WV.get(i);
			  	  }
			  	  
			  	else {
			  	  	x = LV.get(i);
			  	  }  
		  	}
	 	|x = num()
	 	{ return x;}
	  )
	}

boolean not():
	{
	  boolean b = false;
	}
	{
	  (< not >)? { b = true;}
	  { return b;}
	 }

boolean checkp(ArrayList< String > params, String i):
	{
	}
	{
	 {
	   if (!(WV.containsKey(i) || params.contains(i))) {
			return false;
  	  }
  	   
  	  else {  
		return true;
  	  } }
	}
	

/* En robot world los puntos cardianles se encuentran asociados con un numero, esta funcion traduce un punto cardinal
a dichos numeros */
String Orientation():
	{
	  String j;
	}
	{
	  < O >
	  { j= token.image;
	  	int dir = 2;
	  	int facing = 10;

		if ( j.equalsIgnoreCase("north")) {
		  dir = 0;}
		else if ( j.equalsIgnoreCase("south")) {
		  dir = 1;}
		else if ( j.equalsIgnoreCase("west")) {
		  dir = 3;}

		
	  	while ( dir != facing) {
	  	  world.turnRight();
	  	  facing = world.getFacing(); }

	  	return "posible";
	 } }

String Direccion():
	{
	  String j;
	}
	{
	  
	  < D > { j=token.image;return j; }
	 }

String turn():
	{}
	{
	  < dirct > { return token.image; }
	}

boolean cfacing():
	{
	  String j;
	  boolean b = false;
	  int dir = 2;
	}
	{
	  < O > { j=token.image;
	  			if ( j.equalsIgnoreCase("north")) {
			  		dir = 0;}
				else if ( j.equalsIgnoreCase("south")) {
			  		dir = 1;}
				else if ( j.equalsIgnoreCase("west")) {
			  		dir = 3;}
	
	  			if(world.getFacing()== dir)
	  			{b=true; }
	  			 return b;}
	}

/* FIN */